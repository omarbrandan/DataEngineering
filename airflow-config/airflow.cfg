[database]
# The SQLAlchemy connection string to the database where Airflow metadata is stored.
sql_alchemy_conn = postgresql+psycopg2://airflow:airflow@postgres/airflow

# Executor to use (LocalExecutor, SequentialExecutor, CeleryExecutor, etc.)
executor = CeleryExecutor

# Disable example DAGs
load_examples = False

[webserver]
authenticate = True
auth_backend = airflow.providers.google.auth.backends.google_auth

[celery]
# Configuraci√≥n de Celery para ejecutar las tareas distribuidas
broker_url = redis://redis:6379/0
result_backend = db+postgresql://airflow:airflow@postgres/airflow

[logging]
# Set the logging level
logging_level = INFO

# Airflow can store logs remotely in AWS S3, Google Cloud Storage or Elastic Search.
# If remote_base_log_folder is configured and is not local, see remote_logging below.
# Default: logs are stored locally in the following folder.
base_log_folder = /opt/airflow/logs

# Where your logs will be copied to remotely (S3, GCS, etc.)
# remote_base_log_folder =

# Use server-side encryption for logs stored in S3
# encrypt_s3_logs = False

# Folder in which to save log files locally before sending them to remote storage
# (for example, sending logs to S3)
# Default: '' (do not store locally and send directly to remote)
# log_file =

# Airflow can optionally send logs to a remote logging service, like AWS S3 or Google Cloud.
# Set this to True to enable sending logs to remote storage.
remote_logging = False

# Log format for when tasks are executed
task_log_prefix_template = '{{ task_instance.try_number }}'

# This can be configured to make the task logs shorter and easier to read
log_format = [%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s

# Filename template for the task logs
log_filename_template = {{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log

# Directory for log files
base_log_folder = /opt/airflow/logs

# Set up to serve logs on the UI from this folder
log_fetch_timeout_sec = 5
log_fetch_delay_sec = 2
log_fetch_max_retry_count = 5

# Define the logging handler
remote_log_conn_id =